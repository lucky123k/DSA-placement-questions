class Solution {
    public void solveSudoku(char[][] board) {
        solve(board, 0, 0);
    }
    
    private boolean solve(char[][] board, int row, int col) {
        if (col == 9) {
            row++;
            col = 0;
        }
        
        if (row == 9) {
            return true;
        }
        
        if (board[row][col] != '.') {
            return solve(board, row, col + 1);
        }else{
             for (char c = '1'; c <= '9'; c++) {
            if (isValid(board, row, col, c)) {
                board[row][col] = c;
                if (solve(board, row, col + 1)) {
                    return true;
                }
                board[row][col] = '.';
            }
        }
        }
        
        return false;
    }
    
    public static boolean isValid(char[][] board,int x,int y,char val){
        //for row
        for(int j=0;j<9;j++){
            if(board[x][j]==val){
                return false;
            }
        }
        //for col
        for(int i=0;i<9;i++){
            if(board[i][y]==val){
                return false;
            }
        }

        //for sub matrix
        int smi=(x/3)*3;
        int smj=(y/3)*3;
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                if(board[smi+i][smj+j]==val){
                    return false;
                }
            }
        }
        return true;
    }
}

