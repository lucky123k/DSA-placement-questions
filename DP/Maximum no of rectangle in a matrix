class Solution {
    public int largestRectangleArea(int[] heights) {
        int n=heights.length;
        int left[]=new int[n];
        int right[]=new int[n];
        
        Stack<Integer> st=new Stack<Integer>();
        for(int i=0;i<n;i++)
        {
            if(st.size()==0)
                 left[i]=-1;
            else if(st.size()>0&&heights[st.peek()]<heights[i])
                left[i]=st.peek();    
            else if(st.size()>0&&heights[st.peek()]>=heights[i])
            {
                while(st.size()>0&&heights[st.peek()]>=heights[i])
                    st.pop();
                if(st.size()==0)
                     left[i]=-1;
                 else
                     left[i]=st.peek();   
            }
            st.push(i);
        }
        
        st.clear();
        for(int i=n-1;i>=0;i--)
        {
            if(st.size()==0)
                right[i]=n;
            else if( st.size()>0&&heights[st.peek()]<heights[i])
                right[i]=st.peek();
            else if(st.size()>0&&heights[st.peek()]>=heights[i])
            {
                while(st.size()>0&&heights[st.peek()]>=heights[i])
                    st.pop();
                if(st.size()==0)
                    right[i]=n;
                else
                    right[i]=st.peek();
            }
            st.push(i);
        }
        
        int max=0;
        for(int i=0;i<n;i++)
        {
          left[i]=right[i]-left[i]-1;
            left[i]*=heights[i];
            max=Math.max(max,left[i]);
        } 
        return max;
    }
    public int maximalRectangle(char[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int[] heights = new int[n];
        int ans = Integer.MIN_VALUE;
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
               heights[j] = matrix[i][j] == '1' ? heights[j] + 1: 0;
            }
            ans = Math.max(ans, largestRectangleArea(heights));
        }
        return ans;
    }
}
