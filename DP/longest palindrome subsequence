class Solution {
     private  int lps_memo(String str, int i, int j, int[][] memo) {
        if (i == j){
            return memo[i][j]= 1;
        }

        if(memo[i][j] != 0){
            return memo[i][j];
        }
        
        if(str.charAt(i) == str.charAt(j)){
            if (i+1 == j){
                return memo[i][j] =  2;
            }
            else {
                return memo[i][j] =  lps_memo(str, i+1, j-1, memo) +2;
            }
        }
        else {
            return memo[i][j] =  Math.max(lps_memo(str, i+1, j, memo), lps_memo(str, i,j-1, memo));
        }
    }
    public int longestPalindromeSubseq(String s) {
        int n=s.length();
        int[][] memo = new int[n][n];
        return lps_memo(s,0,s.length()-1,memo);
    }
} 
